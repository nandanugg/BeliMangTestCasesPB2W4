// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: contract.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MerchantService_AssignPregeneratedMerchant_FullMethodName         = "/pb.MerchantService/AssignPregeneratedMerchant"
	MerchantService_GetAllMerchantNearestLocations_FullMethodName     = "/pb.MerchantService/GetAllMerchantNearestLocations"
	MerchantService_GetAllMerchantRoutes_FullMethodName               = "/pb.MerchantService/GetAllMerchantRoutes"
	MerchantService_GetAllPregeneratedMerchants_FullMethodName        = "/pb.MerchantService/GetAllPregeneratedMerchants"
	MerchantService_InitMerchantNearestLocations_FullMethodName       = "/pb.MerchantService/InitMerchantNearestLocations"
	MerchantService_InitPegeneratedTSPMerchants_FullMethodName        = "/pb.MerchantService/InitPegeneratedTSPMerchants"
	MerchantService_InitZonesWithPregeneratedMerchants_FullMethodName = "/pb.MerchantService/InitZonesWithPregeneratedMerchants"
	MerchantService_ResetAll_FullMethodName                           = "/pb.MerchantService/ResetAll"
)

// MerchantServiceClient is the client API for MerchantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MerchantServiceClient interface {
	AssignPregeneratedMerchant(ctx context.Context, in *AssignMerchant, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAllMerchantNearestLocations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllMerchantNearestRecord, error)
	GetAllMerchantRoutes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllGeneratedRoutes, error)
	GetAllPregeneratedMerchants(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PregeneratedMerchant, error)
	InitMerchantNearestLocations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InitPegeneratedTSPMerchants(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InitZonesWithPregeneratedMerchants(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ResetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type merchantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantServiceClient(cc grpc.ClientConnInterface) MerchantServiceClient {
	return &merchantServiceClient{cc}
}

func (c *merchantServiceClient) AssignPregeneratedMerchant(ctx context.Context, in *AssignMerchant, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MerchantService_AssignPregeneratedMerchant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetAllMerchantNearestLocations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllMerchantNearestRecord, error) {
	out := new(AllMerchantNearestRecord)
	err := c.cc.Invoke(ctx, MerchantService_GetAllMerchantNearestLocations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetAllMerchantRoutes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllGeneratedRoutes, error) {
	out := new(AllGeneratedRoutes)
	err := c.cc.Invoke(ctx, MerchantService_GetAllMerchantRoutes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetAllPregeneratedMerchants(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PregeneratedMerchant, error) {
	out := new(PregeneratedMerchant)
	err := c.cc.Invoke(ctx, MerchantService_GetAllPregeneratedMerchants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) InitMerchantNearestLocations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MerchantService_InitMerchantNearestLocations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) InitPegeneratedTSPMerchants(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MerchantService_InitPegeneratedTSPMerchants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) InitZonesWithPregeneratedMerchants(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MerchantService_InitZonesWithPregeneratedMerchants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ResetAll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MerchantService_ResetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantServiceServer is the server API for MerchantService service.
// All implementations must embed UnimplementedMerchantServiceServer
// for forward compatibility
type MerchantServiceServer interface {
	AssignPregeneratedMerchant(context.Context, *AssignMerchant) (*emptypb.Empty, error)
	GetAllMerchantNearestLocations(context.Context, *emptypb.Empty) (*AllMerchantNearestRecord, error)
	GetAllMerchantRoutes(context.Context, *emptypb.Empty) (*AllGeneratedRoutes, error)
	GetAllPregeneratedMerchants(context.Context, *emptypb.Empty) (*PregeneratedMerchant, error)
	InitMerchantNearestLocations(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	InitPegeneratedTSPMerchants(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	InitZonesWithPregeneratedMerchants(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	ResetAll(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedMerchantServiceServer()
}

// UnimplementedMerchantServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMerchantServiceServer struct {
}

func (UnimplementedMerchantServiceServer) AssignPregeneratedMerchant(context.Context, *AssignMerchant) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignPregeneratedMerchant not implemented")
}
func (UnimplementedMerchantServiceServer) GetAllMerchantNearestLocations(context.Context, *emptypb.Empty) (*AllMerchantNearestRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMerchantNearestLocations not implemented")
}
func (UnimplementedMerchantServiceServer) GetAllMerchantRoutes(context.Context, *emptypb.Empty) (*AllGeneratedRoutes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMerchantRoutes not implemented")
}
func (UnimplementedMerchantServiceServer) GetAllPregeneratedMerchants(context.Context, *emptypb.Empty) (*PregeneratedMerchant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPregeneratedMerchants not implemented")
}
func (UnimplementedMerchantServiceServer) InitMerchantNearestLocations(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitMerchantNearestLocations not implemented")
}
func (UnimplementedMerchantServiceServer) InitPegeneratedTSPMerchants(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitPegeneratedTSPMerchants not implemented")
}
func (UnimplementedMerchantServiceServer) InitZonesWithPregeneratedMerchants(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitZonesWithPregeneratedMerchants not implemented")
}
func (UnimplementedMerchantServiceServer) ResetAll(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetAll not implemented")
}
func (UnimplementedMerchantServiceServer) mustEmbedUnimplementedMerchantServiceServer() {}

// UnsafeMerchantServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MerchantServiceServer will
// result in compilation errors.
type UnsafeMerchantServiceServer interface {
	mustEmbedUnimplementedMerchantServiceServer()
}

func RegisterMerchantServiceServer(s grpc.ServiceRegistrar, srv MerchantServiceServer) {
	s.RegisterService(&MerchantService_ServiceDesc, srv)
}

func _MerchantService_AssignPregeneratedMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignMerchant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).AssignPregeneratedMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_AssignPregeneratedMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).AssignPregeneratedMerchant(ctx, req.(*AssignMerchant))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetAllMerchantNearestLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetAllMerchantNearestLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetAllMerchantNearestLocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetAllMerchantNearestLocations(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetAllMerchantRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetAllMerchantRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetAllMerchantRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetAllMerchantRoutes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetAllPregeneratedMerchants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetAllPregeneratedMerchants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_GetAllPregeneratedMerchants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetAllPregeneratedMerchants(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_InitMerchantNearestLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).InitMerchantNearestLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_InitMerchantNearestLocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).InitMerchantNearestLocations(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_InitPegeneratedTSPMerchants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).InitPegeneratedTSPMerchants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_InitPegeneratedTSPMerchants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).InitPegeneratedTSPMerchants(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_InitZonesWithPregeneratedMerchants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).InitZonesWithPregeneratedMerchants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_InitZonesWithPregeneratedMerchants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).InitZonesWithPregeneratedMerchants(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ResetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ResetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MerchantService_ResetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ResetAll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MerchantService_ServiceDesc is the grpc.ServiceDesc for MerchantService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MerchantService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MerchantService",
	HandlerType: (*MerchantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignPregeneratedMerchant",
			Handler:    _MerchantService_AssignPregeneratedMerchant_Handler,
		},
		{
			MethodName: "GetAllMerchantNearestLocations",
			Handler:    _MerchantService_GetAllMerchantNearestLocations_Handler,
		},
		{
			MethodName: "GetAllMerchantRoutes",
			Handler:    _MerchantService_GetAllMerchantRoutes_Handler,
		},
		{
			MethodName: "GetAllPregeneratedMerchants",
			Handler:    _MerchantService_GetAllPregeneratedMerchants_Handler,
		},
		{
			MethodName: "InitMerchantNearestLocations",
			Handler:    _MerchantService_InitMerchantNearestLocations_Handler,
		},
		{
			MethodName: "InitPegeneratedTSPMerchants",
			Handler:    _MerchantService_InitPegeneratedTSPMerchants_Handler,
		},
		{
			MethodName: "InitZonesWithPregeneratedMerchants",
			Handler:    _MerchantService_InitZonesWithPregeneratedMerchants_Handler,
		},
		{
			MethodName: "ResetAll",
			Handler:    _MerchantService_ResetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contract.proto",
}
